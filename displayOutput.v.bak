`timescale 1ns / 1ns

//KEY[0] resetn
//KEY[1] plot
//KEY[2] black
//KEY[3] go
//SW[6:0] x/y position
//SW[9:7] colour


module fill
	(
		CLOCK_50,						//	On Board 50 MHz
		KEY,							// On Board Keys
		SW,
		LEDR,
		// The ports below are for the VGA output.  Do not change.
		VGA_CLK,   						//	VGA Clock
		VGA_HS,							//	VGA H_SYNC
		VGA_VS,							//	VGA V_SYNC
		VGA_BLANK_N,						//	VGA BLANK
		VGA_SYNC_N,						//	VGA SYNC
		VGA_R,   						//	VGA Red[9:0]
		VGA_G,	 						//	VGA Green[9:0]
		VGA_B   						//	VGA Blue[9:0]
	);

	input			CLOCK_50;				//	50 MHz
	input	[0:0]	KEY;
	input [9:7] SW;
	// Do not change the following outputs
	output			VGA_CLK;   				//	VGA Clock
	output			VGA_HS;					//	VGA H_SYNC
	output			VGA_VS;					//	VGA V_SYNC
	output			VGA_BLANK_N;				//	VGA BLANK
	output			VGA_SYNC_N;				//	VGA SYNC
	output	[7:0]	VGA_R;   				//	VGA Red[7:0] Changed from 10 to 8-bit DAC
	output	[7:0]	VGA_G;	 				//	VGA Green[7:0]
	output	[7:0]	VGA_B;   				//	VGA Blue[7:0]
	output [9:0] LEDR;
	
	wire resetn;
	assign resetn = KEY[0];
	
	assign LEDR[0] = ld_pos;
	assign LEDR[1] = ld_black;
	assign LEDR[2] = ld_zero;
	assign LEDR[3] = drawNew;
	assign LEDR[4] = countbox_enable;
	assign LEDR[5] = count4Hz_enable;
	assign LEDR[6] = done_box;
	assign LEDR[7] = done_wait;
	assign LEDR[8] = done_wait1;
	assign LEDR[9] = writeEn;
	
	// Create the colour, x, y and writeEn wires that are inputs to the controller.

	wire [2:0] clr;
	wire [7:0] x;
	wire [7:0] y;
	wire writeEn;
	wire ld_pos, ld_black, ld_zero, drawNew;
	wire countbox_enable, count4Hz_enable, done_box, done_wait, done_wait1;


	// Create an Instance of a VGA controller - there can be only one!
	// Define the number of colours as well as the initial background
	// image file (.MIF) for the controller.
	vga_adapter VGA(
			.resetn(resetn),
			.clock(CLOCK_50),
			.colour(clr),
			.x(x),
			.y(y),
			.plot(writeEn),
			/* Signals for the DAC to drive the monitor. */
			.VGA_R(VGA_R),
			.VGA_G(VGA_G),
			.VGA_B(VGA_B),
			.VGA_HS(VGA_HS),
			.VGA_VS(VGA_VS),
			.VGA_BLANK(VGA_BLANK_N),
			.VGA_SYNC(VGA_SYNC_N),
			.VGA_CLK(VGA_CLK));
		defparam VGA.RESOLUTION = "160x120";
		defparam VGA.MONOCHROME = "FALSE";
		defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;
		defparam VGA.BACKGROUND_IMAGE = "black.mif";
			
	// Put your code here. Your code should produce signals x,y,colour and writeEn
	// for the VGA controller, in addition to any other functionality your design may require.
	
	datapath dp(
		.clk(CLOCK_50),
		.resetn(resetn),
		.clr_in(SW[9:7]),
		.ld_zero(ld_zero), 
		.ld_pos(ld_pos),
		.ld_black(ld_black),
		.drawNew(drawNew),
		.count4Hz_enable(count4Hz_enable),
		.countbox_enable(countbox_enable),
		.count2_enable(count2_enable),
		.done_box(done_box),
		.done_wait(done_wait),
		.done_wait1(done_wait1),
		.x(x),
		.y(y),
		.clr(clr)
	);
	
	control ct(
		.clk(CLOCK_50),
		.resetn(resetn),
		.done_box(done_box),
		.done_wait(done_wait),
		.done_wait1(done_wait1),
		.ld_zero(ld_zero), 
		.ld_pos(ld_pos),
		.ld_black(ld_black),
		.drawNew(drawNew),
		.writeEn(writeEn),
		.count4Hz_enable(count4Hz_enable),
		.countbox_enable(countbox_enable),
		.count2_enable(count2_enable),
	);
	
endmodule
